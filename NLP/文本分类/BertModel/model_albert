import numpy
import numpy as np
import torch
import torch.nn as nn
from self_attention import MultiHeadAttention
from enc_dec import Attention
from transformers import BertModel, AlbertModel, XLNetTokenizer, XLNetModel, AutoTokenizer, AutoModel

xlnettokenizer = AutoTokenizer.from_pretrained("hfl/chinese-xlnet-base")

device = torch.device("cuda:1" if torch.cuda.is_available() else "cpu")


# Bert
class BertClassifier(nn.Module):
    def __init__(self, bert_config, num_labels):
        super().__init__()
        # 定义BERT模型
        self.emb = nn.Embedding(100000, bert_config.hidden_size)
        self.bert = BertModel(config=bert_config)
        # 定义分类器
        self.classifier = nn.Linear(bert_config.hidden_size, num_labels)

    def forward(self, input_ids, attention_mask, token_type_ids, input_pos):
        # BERT的输出
        # bert_output[0] - [batch, seq_len, hidden_size]
        # print('here')
        input_pos = self.emb(input_pos)
        print("input_pos:", input_pos.size())
        bert_output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)
        # 取[CLS]位置的pooled output
        # print("bert_output:", bert_output[0].size())
        pooled = bert_output[1]
        print("pooled:", pooled.size())

        # 分类
        logits = self.classifier(pooled)
        print("logits:", logits.size())
        # 返回softmax后结果
        return torch.softmax(logits, dim=1)


# Bert+BiLSTM+POS，用法与BertClassifier一样，可直接在train里面调用
class BertLstmClassifier(nn.Module):
    def __init__(self, num_labels, emb_size, hidden_size=312):
        super().__init__()
        print("emb_size_em:", emb_size)
        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.model = AutoModel.from_pretrained('hfl/chinese-xlnet-base')
        # self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, 256)
        self.lstm_1 = nn.LSTM(hidden_size, 128, num_layers=1, batch_first=True, bidirectional=True)

        # self.gru = nn.GRU(input_size=hidden_size, hidden_size=hidden_size, batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(256, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, input_pinyin, input_pos, input_vocabulary, juhao_index, juhao_input):
        # print("labels_vector_len:", juhao_index)

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        for i in range(len(input_ids)):
            if len(input_ids[i]) > 512:
                input_ids = input_ids[:, 0: 512]
                input_pinyin = input_pinyin[:, 0: 512]
                input_pos = input_pos[:, 0: 512]
                input_vocabulary = input_vocabulary[:, 0: 512]
                juhao_input = juhao_input[:, 0: 512]
            else:
                # print('_here:', len(input_ids[i]))
                min_len = min(len(input_ids[i]), len(input_pinyin[i]),
                              len(input_pos[i]), len(input_vocabulary[i]), len(juhao_input[i]))
                input_ids = input_ids[:, 0: min_len]
                input_pinyin = input_pinyin[:, 0: min_len]
                input_pos = input_pos[:, 0: min_len]
                input_vocabulary = input_vocabulary[:, 0: min_len]
                juhao_input = juhao_input[:, 0: min_len]

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        #     print("labels_vector_len:", len(input_pinyin[i]))

        pos_vector = self.emb(input_pos)
        pinyin_vector = self.emb(input_pinyin)
        seg_vector = self.emb(juhao_input)
        vocabulary_vector = self.emb(input_vocabulary)

        times = 0
        for i in range(len(vocabulary_vector)):
            times += 1
        # output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)

        output_input = self.model(input_ids)
        out_input, _ = self.lstm_1(output_input[0])
        # out_1, attn_1 = self.MultiHeadAttention(out_input, out_input, out_input)
        # print("out:", out_input.size())  + pos_vector + vocabulary_vector + seg_vector + pinyin_vector
        out = out_input + pos_vector + pinyin_vector
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print('logits:', logits)
        return self.softmax(logits)


class BertLstmClassifier_granularity(nn.Module):
    def __init__(self, num_labels, emb_size, hidden_size=312):
        super().__init__()
        print("emb_size_em:", emb_size)
        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.model = AutoModel.from_pretrained('hfl/chinese-xlnet-base')
        # self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, 256)
        self.lstm_1 = nn.LSTM(hidden_size, 128, num_layers=1, batch_first=True, bidirectional=True)

        # self.gru = nn.GRU(input_size=hidden_size, hidden_size=hidden_size, batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(256, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, input_pinyin, input_pos, input_vocabulary, juhao_index, juhao_input):
        # print("labels_vector_len:", juhao_index)

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        for i in range(len(input_ids)):
            if len(input_ids[i]) > 512:
                input_ids = input_ids[:, 0: 512]
                input_pinyin = input_pinyin[:, 0: 512]
                input_pos = input_pos[:, 0: 512]
                input_vocabulary = input_vocabulary[:, 0: 512]
                juhao_input = juhao_input[:, 0: 512]
            else:
                # print('_here:', len(input_ids[i]))
                min_len = min(len(input_ids[i]), len(input_pinyin[i]),
                              len(input_pos[i]), len(input_vocabulary[i]), len(juhao_input[i]))
                input_ids = input_ids[:, 0: min_len]
                input_pinyin = input_pinyin[:, 0: min_len]
                input_pos = input_pos[:, 0: min_len]
                input_vocabulary = input_vocabulary[:, 0: min_len]
                juhao_input = juhao_input[:, 0: min_len]

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        #     print("labels_vector_len:", len(input_pinyin[i]))

        # pos_vector = self.emb(input_pos)
        pinyin_vector = self.emb(input_pinyin)
        seg_vector = self.emb(juhao_input)
        vocabulary_vector = self.emb(input_vocabulary)

        times = 0
        for i in range(len(vocabulary_vector)):
            times += 1
        # output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)

        output_input = self.model(input_ids)
        out_input, _ = self.lstm_1(output_input[0])
        # out_1, attn_1 = self.MultiHeadAttention(out_input, out_input, out_input)
        # print("out:", out_input.size())  + pos_vector + vocabulary_vector + seg_vector + pinyin_vector
        out = out_input + vocabulary_vector + seg_vector
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print('logits:', logits)
        return self.softmax(logits)


class BertLstmClassifier_pinyin(nn.Module):
    def __init__(self, num_labels, emb_size, hidden_size=312):
        super().__init__()
        print("emb_size_em:", emb_size)
        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.model = AutoModel.from_pretrained('hfl/chinese-xlnet-base')
        # self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, 256)
        self.lstm_1 = nn.LSTM(hidden_size, 128, num_layers=1, batch_first=True, bidirectional=True)

        # self.gru = nn.GRU(input_size=hidden_size, hidden_size=hidden_size, batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(256, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, input_pinyin, input_pos, input_vocabulary, juhao_index, juhao_input):
        # print("labels_vector_len:", juhao_index)

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        for i in range(len(input_ids)):
            if len(input_ids[i]) > 512:
                input_ids = input_ids[:, 0: 512]
                input_pinyin = input_pinyin[:, 0: 512]
                input_pos = input_pos[:, 0: 512]
                input_vocabulary = input_vocabulary[:, 0: 512]
                juhao_input = juhao_input[:, 0: 512]
            else:
                # print('_here:', len(input_ids[i]))
                min_len = min(len(input_ids[i]), len(input_pinyin[i]),
                              len(input_pos[i]), len(input_vocabulary[i]), len(juhao_input[i]))
                input_ids = input_ids[:, 0: min_len]
                input_pinyin = input_pinyin[:, 0: min_len]
                input_pos = input_pos[:, 0: min_len]
                input_vocabulary = input_vocabulary[:, 0: min_len]
                juhao_input = juhao_input[:, 0: min_len]

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        #     print("labels_vector_len:", len(input_pinyin[i]))

        pos_vector = self.emb(input_pos)
        pinyin_vector = self.emb(input_pinyin)
        seg_vector = self.emb(juhao_input)
        vocabulary_vector = self.emb(input_vocabulary)

        times = 0
        for i in range(len(vocabulary_vector)):
            times += 1
        # output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)

        output_input = self.model(input_ids)
        out_input, _ = self.lstm_1(output_input[0])
        # out_1, attn_1 = self.MultiHeadAttention(out_input, out_input, out_input)
        # print("out:", out_input.size())  + pos_vector + vocabulary_vector + seg_vector + pinyin_vector
        out = out_input + pinyin_vector
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print('logits:', logits)
        return self.softmax(logits)


class BertLstmClassifier_all(nn.Module):
    def __init__(self, num_labels, emb_size, hidden_size=312):
        super().__init__()
        print("emb_size_em:", emb_size)

        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.model = AutoModel.from_pretrained('hfl/chinese-xlnet-base')
        # self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, 256)
        self.lstm_1 = nn.LSTM(hidden_size, 128, num_layers=1, batch_first=True, bidirectional=True)
        self.enc_dec = Attention()
        # self.gru = nn.GRU(input_size=hidden_size, hidden_size=hidden_size, batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(256, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, input_pinyin, input_pos, input_vocabulary, juhao_index, juhao_input):
        device_all = torch.device("cuda:4" if torch.cuda.is_available() else "cpu")
        # print("labels_vector_len:", juhao_index)
        for i in range(len(input_ids)):
            if len(input_ids[i]) > 512:
                input_ids = input_ids[:, 0: 512]
                input_pinyin = input_pinyin[:, 0: 512]
                input_pos = input_pos[:, 0: 512]
                input_vocabulary = input_vocabulary[:, 0: 512]
                juhao_input = juhao_input[:, 0: 512]
            else:
                min_len = min(len(input_ids[i]), len(input_pinyin[i]), len(input_pos[i]), len(input_vocabulary[i]), len(juhao_input[i]))
                input_ids = input_ids[:, 0: min_len]
                input_pinyin = input_pinyin[:, 0: min_len]
                input_pos = input_pos[:, 0: min_len]
                input_vocabulary = input_vocabulary[:, 0: min_len]
                juhao_input = juhao_input[:, 0: min_len]

        pos_vector = self.emb(input_pos)
        pinyin_vector = self.emb(input_pinyin)
        seg_vector = self.emb(juhao_input)
        vocabulary_vector = self.emb(input_vocabulary)
        # print('input_ids:', input_ids.unsqueeze(0).size())
        # encoder-decoder结构
        hidden = torch.zeros(1, 1, 128)
        hidden = hidden.to(device_all)
        self.enc_dec.to(device_all)
        enc_dec_output, _ = self.enc_dec(input_ids.unsqueeze(0), hidden, input_pinyin.unsqueeze(0))
        enc_dec_output = enc_dec_output.unsqueeze(2)
        enc_dec_output = enc_dec_output.repeat(1, 1, 256)
        # print('output_de:', enc_dec_output.size())
        times = 0
        for i in range(len(vocabulary_vector)):
            times += 1
        # output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)

        output_input = self.model(input_ids)
        # print('output_de:', output_input[0].size())
        out_input, _ = self.lstm_1(output_input[0])
        # print('out_input:', out_input.size())
        # out_1, attn_1 = self.MultiHeadAttention(out_input, out_input, out_input)
        # print("out:", out_input.size())  + pos_vector + vocabulary_vector + seg_vector + pinyin_vector
        # print(enc_dec_output.is_cuda)

        print(enc_dec_output.is_cuda)
        out = out_input + pos_vector + vocabulary_vector + seg_vector + pinyin_vector + enc_dec_output
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print('logits:', logits)
        return self.softmax(logits)


class BertLstmClassifier_original(nn.Module):
    def __init__(self, num_labels, emb_size, hidden_size=312):
        super().__init__()
        print("emb_size_em:", emb_size)
        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.model = AutoModel.from_pretrained('hfl/chinese-xlnet-base')
        # self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, 256)
        self.lstm_1 = nn.LSTM(hidden_size, 128, num_layers=1, batch_first=True, bidirectional=True)

        # self.gru = nn.GRU(input_size=hidden_size, hidden_size=hidden_size, batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(256, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids, input_pinyin, input_pos, input_vocabulary, juhao_index, juhao_input):
        # print("labels_vector_len:", juhao_index)

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        for i in range(len(input_ids)):
            if len(input_ids[i]) > 512:
                input_ids = input_ids[:, 0: 512]
                input_pinyin = input_pinyin[:, 0: 512]
                input_pos = input_pos[:, 0: 512]
                input_vocabulary = input_vocabulary[:, 0: 512]
                juhao_input = juhao_input[:, 0: 512]
            else:
                # print('_here:', len(input_ids[i]))
                min_len = min(len(input_ids[i]), len(input_pinyin[i]),
                              len(input_pos[i]), len(input_vocabulary[i]), len(juhao_input[i]))
                input_ids = input_ids[:, 0: min_len]
                input_pinyin = input_pinyin[:, 0: min_len]
                input_pos = input_pos[:, 0: min_len]
                input_vocabulary = input_vocabulary[:, 0: min_len]
                juhao_input = juhao_input[:, 0: min_len]

        # for i in range(len(input_ids)):
        #     print("labels_vector_len:", len(input_ids[i]))
        #     print("labels_vector_len:", len(input_pos[i]))
        #     print("labels_vector_len:", len(input_vocabulary[i]))
        #     print("labels_vector_len:", len(input_pinyin[i]))

        pos_vector = self.emb(input_pos)
        pinyin_vector = self.emb(input_pinyin)
        seg_vector = self.emb(juhao_input)
        vocabulary_vector = self.emb(input_vocabulary)

        times = 0
        for i in range(len(vocabulary_vector)):
            times += 1
        # output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)

        output_input = self.model(input_ids)
        out_input, _ = self.lstm_1(output_input[0])
        # out_1, attn_1 = self.MultiHeadAttention(out_input, out_input, out_input)
        # print("out:", out_input.size())  + pos_vector + vocabulary_vector + seg_vector + pinyin_vector
        out = out_input
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print('logits:', logits)
        return self.softmax(logits)


class BertGRUClassifier(nn.Module):
    def __init__(self, bert_config, num_labels, emb_size):
        super().__init__()
        # print("berthere:")
        self.model = AlbertModel.from_pretrained('clue/albert_chinese_tiny')
        self.bert = AlbertModel(config=bert_config)
        self.emb = nn.Embedding(emb_size, bert_config.hidden_size * 2)
        # self.lstm = nn.LSTM(input_size=bert_config.hidden_size, hidden_size=bert_config.hidden_size, num_layers=1,
        #                     batch_first=True, bidirectional=True)
        self.gru = nn.GRU(input_size=bert_config.hidden_size, hidden_size=bert_config.hidden_size,
                          batch_first=True, bidirectional=True)
        self.MultiHeadAttention = MultiHeadAttention()
        self.classifier = nn.Linear(bert_config.hidden_size * 2, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)
        # print('self:', num_labels)

    def forward(self, input_ids, attention_mask, token_type_ids, input_pos, input_vocabulary):  #
        output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)
        # print("here:")
        # output = self.model(input_ids)
        input_pos = self.emb(input_pos)
        input_vocabulary = self.emb(input_vocabulary)

        out, _ = self.gru(output[0])
        # print("output:", output.last_hidden_state.size())
        out, attn = self.MultiHeadAttention(out, out, out)
        # print("out:", out.size())
        out = out + input_pos + input_vocabulary

        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        # print("logits:", logits)
        # print("logits:", self.softmax(logits))
        return self.softmax(logits)


# LSTM
class LstmClassifier(nn.Module):
    def __init__(self, num_labels):
        super().__init__()
        self.hidden_size = 128
        # self.model = BertModel.from_pretrained('clue/albert_chinese_tiny')
        # self.bert = BertModel(config=bert_config, num_labels)
        self.emb = nn.Embedding(50000, self.hidden_size)
        self.lstm = nn.LSTM(input_size=self.hidden_size, hidden_size=self.hidden_size, num_layers=2,
                            batch_first=True, bidirectional=True)
        self.classifier = nn.Linear(self.hidden_size * 2, num_labels)  # 双向LSTM 需要乘以2
        self.softmax = nn.Softmax(dim=1)

    def forward(self, input_ids):
        # output, pooled = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)
        output = self.emb(input_ids)
        # output = self.model(input_ids)
        out, _ = self.lstm(output)
        logits = self.classifier(out[:, -1, :])  # 取最后时刻的输出
        return self.softmax(logits)
